package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private DbIterator child1, child2;
    private JoinPredicate p;
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.child1 = child1;
        this.child2 = child2;
        this.p = p;
    }

    public JoinPredicate getJoinPredicate() {
        return p;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     * alias or table name.
     */
    public String getJoinField1Name() {
        DbIterator child1copy = child1;
    	try {
        	child1copy.open();
        	child1copy.rewind();
			if (child1copy.hasNext()) {
				Tuple t = child1copy.next();
				int tableid = t.getRecordId().getPageId().getTableId();
				String tableName = Database.getCatalog().getTableName(tableid);
				child1copy.rewind();
				child1copy.close();
				return tableName + "." + child1copy.getTupleDesc().getFieldName(p.getField1());
			}
			
		} catch (NoSuchElementException | DbException
				| TransactionAbortedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        return null;	
    }

    /**
     * @return the field name of join field2. Should be quantified by
     * alias or table name.
     */
    public String getJoinField2Name() {
    	DbIterator child2copy = child2;
    	try {
        	child2copy.open();
        	child2copy.rewind();
			if (child2copy.hasNext()) {
				Tuple t = child2copy.next();
				int tableid = t.getRecordId().getPageId().getTableId();
				String tableName = Database.getCatalog().getTableName(tableid);
				child2copy.rewind();
				child2copy.close();
				return tableName + "." + child2copy.getTupleDesc().getFieldName(p.getField1());
			}
			
		} catch (NoSuchElementException | DbException
				| TransactionAbortedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        return null;
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     * implementation logic.
     */
    public TupleDesc getTupleDesc() {
    	TupleDesc td1 = child1.getTupleDesc();
    	TupleDesc td2 = child2.getTupleDesc();
    	int new_length = td1.numFields() + td2.numFields();
    	Type[] typeAr = new Type[new_length]; 
    	String[] fieldAr = new String[new_length];
    	for (int i = 0; i < td1.numFields(); i++){
    		typeAr[i] = td1.getFieldType(i);
    		fieldAr[i] = td1.getFieldName(i);
    	}
    	for (int i = td1.numFields(), j = 0; i < new_length; i++, j++){
    		typeAr[i] = td2.getFieldType(j);
    		fieldAr[i] = td2.getFieldName(j);
    	}
    	TupleDesc newtd = new TupleDesc(typeAr, fieldAr);
        return newtd;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        child1.open();
        child2.open();
        super.open();
    }

    public void close() {
        child1.close();
        child2.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        child1.rewind();
        child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p/>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p/>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return null;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
    }

}
